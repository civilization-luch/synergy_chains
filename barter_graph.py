import json
from collections import defaultdict

class BarterGraph:
    def __init__(self):
        self.graph = defaultdict(list)
        self.offers = defaultdict(set)
        self.wants = defaultdict(set)
        self.ratings = {}  

    def add_participant(self, name, offers, wants, rating):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑—É."""
        self.offers[name] = set(offers) if isinstance(offers, list) else {offers}
        self.wants[name] = set(wants) if isinstance(wants, list) else {wants}
        self.ratings[name] = rating  

    def build_graph(self):
        """–°–æ–∑–¥–∞—ë—Ç —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        for name, wants in self.wants.items():
            for want in wants:
                for owner, owner_offers in self.offers.items():
                    if want in owner_offers and owner != name:
                        self.graph[name].append((owner, want, self.ratings[owner]))  

    def find_best_cycles(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–∏–∫–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –ø–æ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É."""
        cycles = []
        visited = set()
        nodes = list(self.graph.keys())

        def dfs(node, start, path, trade_path, ratings):
            if node in visited:
                return
            visited.add(node)
            path.append(node)
            ratings.append(self.ratings[node])

            for neighbor, traded_item, neighbor_rating in self.graph[node]:
                if neighbor == start and len(path) > 2:
                    trade_path.append((node, traded_item, neighbor))
                    ratings.append(self.ratings[neighbor])
                    cycle = self.normalize_cycle(trade_path)
                    avg_weighted_rating = sum(ratings) / len(ratings)  
                    cycles.append((cycle, avg_weighted_rating))
                    trade_path.pop()
                    ratings.pop()
                elif neighbor not in path:
                    trade_path.append((node, traded_item, neighbor))
                    dfs(neighbor, start, path, trade_path, ratings)
                    trade_path.pop()

            path.pop()
            ratings.pop()
            visited.remove(node)

        for node in nodes:
            dfs(node, node, [], [], [])

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ü–∏–∫–ª–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
        unique_cycles = {}
        for cycle, rating in cycles:
            key = tuple(sorted([step[0] for step in cycle]))  
            if key not in unique_cycles or unique_cycles[key][1] < rating:
                unique_cycles[key] = (cycle, rating)

        return sorted(unique_cycles.values(), key=lambda x: x[1], reverse=True)

    def normalize_cycle(self, cycle):
        """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ü–∏–∫–ª –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤."""
        names = [step[0] for step in cycle]
        min_index = names.index(min(names))  
        return cycle[min_index:] + cycle[:min_index]  

    def load_from_json(self, json_file):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä–æ–∏—Ç —Å–≤—è–∑–∏."""
        with open(json_file, "r", encoding="utf-8") as f:
            data = json.load(f)

        for participant in data:
            self.add_participant(
                participant["name"], participant["offers"], participant["wants"], participant["rating"]
            )

        self.build_graph()



import argparse

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Load barter data from a JSON file.")
    parser.add_argument("json_file", type=str, help="Path to the JSON file containing barter data.")
    args = parser.parse_args()
    


    # === –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===
    json_file = args.json_file

    barter = BarterGraph()
    barter.load_from_json(json_file)

    # –ù–∞–π–¥—ë–º —Ü–∏–∫–ª—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    cycles = barter.find_best_cycles()

    # –í—ã–≤–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–ø–æ—á–∫–∏
    for i, (cycle, rating) in enumerate(cycles, 1):
        print(f"üèÜ –¶–µ–ø–æ—á–∫–∞ {i} (–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating:.2f}):")
        for sender, item, receiver in cycle:
            print(f"  {sender} ‚Üí –ø–æ–ª—É—á–∞–µ—Ç ({item}) ‚Üí {receiver}")
        print("-" * 30)
